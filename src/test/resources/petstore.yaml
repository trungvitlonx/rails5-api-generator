openapi: 3.0.1
servers: [ ]
info:
  description: |
    This is a sample Petstore server.
  version: "1.0.0"
  title: Petstore OpenAPI 3.0
  contact:
    email: trunglq3007@gmail.com

paths:
  /pets:
    post:
      tags:
        - pets
      summary: Add a new pet to the store
      operationId: addPet
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Pet'

  /pets/findByStatus:
    get:
      tags:
        - pets
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value

  /pets/findByTags:
    get:
      tags:
        - pets
      summary: Finds Pets by tags
      description: >-
        Multiple tags can be provided with comma separated strings. Use\ \ tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value

  '/pets/{petId}':
    get:
      tags:
        - pets
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found

    put:
      tags:
        - pets
      summary: Update an existing pet
      operationId: updatePet
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Pet'

    delete:
      tags:
        - pets
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      example:
        - id: 100
          name: Mammal
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
    CreatePet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        category_ids:
          type: array
          items:
            type: integer
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          items:
            type: string
        tagIds:
          type: array
          items:
            type: integer
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePet'
      description: Pet object that needs to be added to the store
      required: true